[{"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js":"1","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js":"2","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Algorithms.js":"3","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MultiplePointers.js":"4","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/Home.js":"5","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Navbar.js":"6","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js":"7","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MergeSort.js":"8","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js":"9","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js":"10"},{"size":370,"mtime":1611768353980,"results":"11","hashOfConfig":"12"},{"size":215,"mtime":1611677274000,"results":"13","hashOfConfig":"12"},{"size":757,"mtime":1611933770095,"results":"14","hashOfConfig":"12"},{"size":2421,"mtime":1612116167014,"results":"15","hashOfConfig":"12"},{"size":510,"mtime":1611933823399,"results":"16","hashOfConfig":"12"},{"size":476,"mtime":1611767006054,"results":"17","hashOfConfig":"12"},{"size":382,"mtime":1611861683724,"results":"18","hashOfConfig":"12"},{"size":2359,"mtime":1612115976553,"results":"19","hashOfConfig":"12"},{"size":281,"mtime":1612108668215,"results":"20","hashOfConfig":"12"},{"size":2597,"mtime":1612105132431,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1n5k89m",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js",[],["46","47"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js",[],["48","49"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Algorithms.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MultiplePointers.js",["50"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/Home.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Navbar.js",["51"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MergeSort.js",["52"],"import React, { useState, useEffect } from 'react'\nimport ArrayBar from './ArrayBar';\nimport {getMergeSortAnimations} from '../helperMethods/MergeSort'\n\nconst MergeSort = () => {\n\n    const [testArray, setTestArray] = useState([])\n    \n    const resetArray = () => {\n        const array = []\n        for(let i = 0; i < randomInt(20, 100); i++){\n            array.push(randomInt(20, 500))\n        }\n        setTestArray(array)\n    }\n\n    const randomInt = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n\n    // Change this value for the speed of the animations.\n    const ANIMATION_SPEED_MS = 40;\n\n    // This is the main color of the array bars.\n    const PRIMARY_COLOR = 'turquoise';\n\n    // This is the color of array bars that are being compared throughout the animations.\n    const SECONDARY_COLOR = 'red';\n\n    // Need to change to more complicated merge sort\n    const mergeSort = () => {\n        const animations = getMergeSortAnimations(testArray);\n        for (let i = 0; i < animations.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar')\n          const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            setTimeout(() => {\n              const [barOneIdx, newHeight] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx];\n              barOneStyle.style.height = `${newHeight}px`;\n              barOneStyle.innerHTML = `${newHeight}`\n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n      }\n\n    useEffect(() => {\n        resetArray()\n    }, [])\n\n    return (\n        <div className=\"flex flex-row\">\n            {testArray.map((value, index) => {\n                return <ArrayBar value={value} index={index} key={index}/>\n            })}\n            <button onClick={() => mergeSort()}>\n                Run\n            </button>\n        </div>\n    )\n}\n\nexport default MergeSort\n","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js",[],["53","54"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"55","replacedBy":"59"},{"ruleId":"57","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":60,"column":8,"nodeType":"63","endLine":60,"endColumn":10,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":58,"column":8,"nodeType":"63","endLine":58,"endColumn":10,"suggestions":"69"},{"ruleId":"55","replacedBy":"70"},{"ruleId":"57","replacedBy":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],["72"],["73"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetArray'. Either include it or remove the dependency array.","ArrayExpression",["74"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["75"],["72"],["73"],"no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},{"desc":"76","fix":"78"},"Update the dependencies array to be: [resetArray]",{"range":"79","text":"80"},{"range":"81","text":"80"},[1928,1930],"[resetArray]",[2023,2025]]