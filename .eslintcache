[{"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js":"1","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js":"2","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Algorithms.js":"3","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MultiplePointers.js":"4","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/Home.js":"5","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Navbar.js":"6","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js":"7","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MergeSort.js":"8","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js":"9","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js":"10"},{"size":373,"mtime":1612206424066,"results":"11","hashOfConfig":"12"},{"size":186,"mtime":1612205196777,"results":"13","hashOfConfig":"12"},{"size":757,"mtime":1611933770095,"results":"14","hashOfConfig":"12"},{"size":2421,"mtime":1612116167014,"results":"15","hashOfConfig":"12"},{"size":510,"mtime":1611933823399,"results":"16","hashOfConfig":"12"},{"size":476,"mtime":1611767006054,"results":"17","hashOfConfig":"12"},{"size":382,"mtime":1611861683724,"results":"18","hashOfConfig":"12"},{"size":2359,"mtime":1612115976553,"results":"19","hashOfConfig":"12"},{"size":281,"mtime":1612108668215,"results":"20","hashOfConfig":"12"},{"size":2597,"mtime":1612105132431,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1n5k89m",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/App.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/index.js",[],["46","47"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Algorithms.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MultiplePointers.js",["48"],"import React, {useState, useEffect} from 'react'\nimport ArrayCircle from './ArrayCircle'\n\nconst MultiplePointers = () => {\n\n    const [testArray, setTestArray] = useState([])\n    const [rows, setRows] = useState(1)\n\n    const resetArray = () => {\n        const array = []\n        for(let i = 0; i < randomInt(10, 50); i++){\n            array.push(randomInt(20, 75))\n        }\n        setTestArray(array)\n        const rowNum = Math.floor(array.length / 5)\n        setRows(rowNum)\n    }\n\n    const randomInt = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n\n    const findSum = (left = 0, right = testArray.length - 1, total = 100, oldTarget1 = null, oldTarget2 = null) => {\n        \n        if(left >= testArray.length - 1){\n            return false\n        }\n\n        let sum = testArray[left] + testArray[right]\n\n        if(oldTarget1 !== null){\n            oldTarget1.style.backgroundColor = \"rgb(107, 114, 128)\"\n        }\n        if(oldTarget2 !== null){\n            oldTarget2.style.backgroundColor = \"rgb(107, 114, 128)\"\n        }\n\n        const target1 = document.getElementById(`circle-${left}`)\n        const target2 = document.getElementById(`circle-${right}`)\n\n        target1.style.backgroundColor = \"whitesmoke\"\n        target2.style.backgroundColor = \"whitesmoke\"\n\n        if(sum === total) {\n            const answer1 = document.getElementById(`circle-${left}`)\n            const answer2 = document.getElementById(`circle-${right}`)\n\n            answer1.style.backgroundColor = \"green\"\n            answer2.style.backgroundColor = \"green\"\n            return true\n        } else if(right <= left + 1){\n            setTimeout(() => findSum(left + 1, testArray.length - 1, total, target1, target2), 20)\n        } else{\n            setTimeout(() => findSum(left, right - 1, total, target1, target2), 20)       \n        }\n    }\n\n    useEffect(() => {\n        resetArray()\n    }, [])\n\n    return (\n        <div>\n            <div className={`flex items-center h-64 grid grid-cols-${rows} grid-flow-row gap-8`}>\n                {testArray.map((value, index) => {\n                    return <ArrayCircle value={value} index={index} />\n                })}\n            </div>\n            <button className=\"hover:bg-gray-200 rounded-xl p-1 float-right\" onClick={() => findSum()}>\n                Run\n            </button>\n        </div>\n    )\n}\n\nexport default MultiplePointers\n","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/Home.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/containers/Navbar.js",["49"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayCircle.js",[],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/MergeSort.js",["50"],"import React, { useState, useEffect } from 'react'\nimport ArrayBar from './ArrayBar';\nimport {getMergeSortAnimations} from '../helperMethods/MergeSort'\n\nconst MergeSort = () => {\n\n    const [testArray, setTestArray] = useState([])\n    \n    const resetArray = () => {\n        const array = []\n        for(let i = 0; i < randomInt(20, 100); i++){\n            array.push(randomInt(20, 500))\n        }\n        setTestArray(array)\n    }\n\n    const randomInt = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n\n    // Change this value for the speed of the animations.\n    const ANIMATION_SPEED_MS = 40;\n\n    // This is the main color of the array bars.\n    const PRIMARY_COLOR = 'turquoise';\n\n    // This is the color of array bars that are being compared throughout the animations.\n    const SECONDARY_COLOR = 'red';\n\n    // Need to change to more complicated merge sort\n    const mergeSort = () => {\n        const animations = getMergeSortAnimations(testArray);\n        for (let i = 0; i < animations.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar')\n          const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            setTimeout(() => {\n              const [barOneIdx, newHeight] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx];\n              barOneStyle.style.height = `${newHeight}px`;\n              barOneStyle.innerHTML = `${newHeight}`\n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n      }\n\n    useEffect(() => {\n        resetArray()\n    }, [])\n\n    return (\n        <div className=\"flex flex-row\">\n            {testArray.map((value, index) => {\n                return <ArrayBar value={value} index={index} key={index}/>\n            })}\n            <button onClick={() => mergeSort()}>\n                Run\n            </button>\n        </div>\n    )\n}\n\nexport default MergeSort\n","/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/components/ArrayBar.js",[],["51","52"],"/Users/kevinsheehan/Documents/Projects/Algorithms/algorithms-visualizer/src/helperMethods/MergeSort.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":60,"column":8,"nodeType":"59","endLine":60,"endColumn":10,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":58,"column":8,"nodeType":"59","endLine":58,"endColumn":10,"suggestions":"65"},{"ruleId":"53","replacedBy":"66"},{"ruleId":"55","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetArray'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["71"],["68"],["69"],"no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"72","fix":"74"},"Update the dependencies array to be: [resetArray]",{"range":"75","text":"76"},{"range":"77","text":"76"},[1928,1930],"[resetArray]",[2023,2025]]